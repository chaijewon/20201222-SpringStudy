<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- 
         web.xml 
            = DispatcherServlet : Spring
            = ActionServlet : struts
            = FilterDispatcher: struts2  ==> 마이플랫폼 , JSF
         application-*.xml
         Model => View
         
         1) 톰캣 => web.xml에 등록된 클래스를 메모리 할당
                  1. DispatcherServlet (xml을 파일을 읽기)
                  2. XML파일 => WebApplicationContext (XML을 읽어서 => 등록된 클래스 메모리 할당)
                              ======================
                                 HandlerMapping : 요청시마다 @Controller클래스를 찾아준다 (DL,DI)
         2) 프로그래머가 작업 
         
         = 1. Container : 클래스 관리 
         = 2. DL/DI 
         = 3. prototype / singleton
         = 4. AOP / 인터셉트 
         = 5. DAO/SERVICE 
         = 6. ORM장점 
         = 7. Transaction
         = 8. Spring의 동작원리 
         = 9. Controller / RestController
         
                 자바
          = 1. 객체지향프로그램이란?
          = 2. 캡슐화 VS 은닉화
          = 3. 오버로딩 VS 오버라읻이딩
          = 4. public VS protected 
          = 5. 추상 클래스 VS 인터페이스 
          = 6. 예외처리 (목적 , 정의)
          = 7. 직렬화 (IO)
          = 8. 제네릭스 (형변환)
          = 9. 자료구조 : List/Set/Map
          
          HTML
          = 1.시멘텍태그 
          = 2.GET/POST
          
          JavaScript 
          = 1. 클로저
          = 2. Jquery/JavaScript
          = 3. VueJS/Ajax
          
                   면접 : 
                    1. 결론 = 부연설명
                    2. 이론적인 면만 설명하면 안된다 
                       
     -->
	<servlet>
      <servlet-name>dispatcher</servlet-name><!-- key -->
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- value -->
       <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/config/application-*.xml</param-value>
       </init-param>
      <!-- <init-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
      </init-param>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.sist.config.EmpConfig</param-value>
      </init-param> -->
    </servlet>
    <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>*.do</url-pattern><!-- url => .do : DispatcherServlet을 호출한다 -->
    </servlet-mapping>
    <!-- 한글 변환 코드 등록 
         request를 사용하지 않기 때문에 스프링 자체에서 디코딩해야된다 
         POST : 프로그램에서 처리 => 스프링이 자체 처리
         GET : 톰캣내부에서 처리 : server.xml
    -->
    <filter>
		    <filter-name>encodingFilter</filter-name>
		    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		    <init-param>
		        <param-name>encoding</param-name>
		        <param-value>UTF-8</param-value>
		    </init-param>
		    <init-param>
		        <param-name>forceEncoding</param-name>
		        <param-value>true</param-value>
		    </init-param>
		</filter>
		
		<!-- /의 형식으로 시작하는 url에 대하여 UTF-8로 인코딩 -->
		<filter-mapping>
		    <filter-name>encodingFilter</filter-name>
		    <url-pattern>/*</url-pattern>
		</filter-mapping>
    <!-- 에러페이지 등록 -->
</web-app>
